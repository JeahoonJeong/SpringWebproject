<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bookMapper">

	<!-- 한개의 책 데이터 가져오기 -->
	<select id="getReadBookData" parameterType="Integer"
		resultType="com.spring.webproject.dto.BooksDTO">
		select A.authorId, A.translatorId, A.publisher,
		A.bookTitle, A.bookPrice, A.isbn, TO_CHAR(A.publishDate,'YYYY-MM-DD')
		publishDate, A.introduction, A.page, A.subTitle, A.bookSize,
		A.tableOfContents, B.authorname from books A, author B where isbn =
		#{isbn} and B.authorid = (select authorid from books where isbn =
		#{isbn})
	</select>

	<!-- 작가 정보 가져오기 -->

	<select id="getReadAuthorData" parameterType="Integer"
		resultType="com.spring.webproject.dto.AuthorDTO">
		select authorname, nationality, category, introduction,
		image from author where authorid = (select authorid from books where
		isbn = #{isbn})
	</select>

	<select id="getReadBookList" parameterType="Integer"
		resultType="com.spring.webproject.dto.BooksImageDTO">
		select * from(
		select rownum rnum, data.* from(
		select isbn,
		bookImage from bookImage where isbn = #{isbn}
		order by bookImage asc)
		data)

	</select>

	<select id="getReadReviewList" parameterType="Integer"
		resultType="com.spring.webproject.dto.ReviewDTO">
		select R.isbn, R.reviewId, R.userId, R.reviewTitle,
		to_char(R.created,'YYYY-MM-DD') as created, R.contents, R.sentence,
		R.hitCount, U.USERNAME, S.RATE from review R
		left join USERS U on
		U.userid = R.userid
		left join RATING S on S.USERID = R.USERID
		left join
		thumbup T on T.userid = R.userid
		where R.isbn =#{isbn}
	</select>

	<!-- 한개의 리뷰 테이블 가져오기 -->
	<select id="getReadReviewData" parameterType="int"
		resultType="com.spring.webproject.dto.ReviewDTO">
		select R.isbn, R.reviewId, R.userId, R.reviewTitle,
		to_char(R.created,'YYYY-MM-DD') as created, R.contents, R.sentence,
		R.hitCount, U.USERNAME, S.RATE from review R
		left join USERS U on
		U.userid = R.userid
		left join RATING S on S.USERID = R.USERID
		left join
		thumbup T on T.userid = R.userid
		where R.reviewId =#{reviewId}

	</select>

	<!-- 간단평 가져오기 -->
	<select id="getReadSimpleReviewList" parameterType="int"
		resultType="com.spring.webproject.dto.SimpleReviewDTO">
		select R.contents,R.reviewId, U.username,T.thumbup from review R
		LEFT JOIN users U on R.userid = U.userid
		LEFT JOIN THUMBUP T on R.reviewId = T.reviewId
		where isbn = #{isbn}
	</select>

	<!-- 간단평 입력하기 -->
	<insert id="insertSimpleReviewData" parameterType="com.spring.webproject.dto.ReviewDTO">
		insert into review(isbn, reviewId, userId, reviewTitle, created, contents, sentence, )
		values(#{isbn},#{reviewId},#{userId}," ", sysdate, #{contents}, 0)
	</insert>

	<!-- 리뷰테이블 전체 개수 가져오기 -->
	<select id="getReviewDataCount" parameterType="int"
		resultType="int">
		select nvl(count(*),0) from review where isbn = #{isbn}
	</select>


	<!-- 리뷰 테이블 num 최대값 가져오기 -->
	<select id="getReadMaxNum" resultType="int">
		select nvl(max(reviewId),
		0) from review
	</select>

	<!-- 리뷰 입력하기 -->
	<insert id="insertReviewData"
		parameterType="com.spring.webproject.dto.ReviewDTO">
		insert into review(isbn, reviewId, userId, reviewTitle,
		created, contents, sentence, hitcount)
		values(#{isbn},#{reviewId}, #{userId}, #{reviewTitle}, sysdate, #{contents}, #{sentence},0)
	</insert>

	<!-- 리뷰 평점 입력하기 -->
	<insert id="insertReviewRateData" parameterType="map">
		insert into
		rating(isbn, userId, rate) values(#{isbn}, #{userId}, #{rate})
	</insert>

	<!-- 조회수 수정 -->
	<update id="updateHitCount" parameterType="int">
		update review set
		hitCount = hitCount + 1 where reviewId = #{reviewId}
	</update>

</mapper>
